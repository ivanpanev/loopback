- name: Query NetBox for a device by name
  uri:
    url: "https://netbox.spas.net/api/dcim/devices/?name={{ fw_name }}"
    method: GET
    return_content: true
    headers:
      Authorization: "Token 551asdasdasdasd"
      Accept: "application/json"
  register: device_response

- name: Query NetBox for a VM by name if no device found
  uri:
    url: "https://netbox.spas.net/api/virtualization/virtual-machines/?name={{ fw_name }}"
    method: GET
    return_content: true
    headers:
      Authorization: "Token 551asdasdasdasd"
      Accept: "application/json"
  register: vm_response
  when: "(device_response['json']['results'] | length) == 0"

- name: Determine which data to use
  set_fact:
    primary_data: "{{ vm_response['json']['results'][0] if (device_response['json']['results'] | length) == 0 else device_response['json']['results'][0] }}"
  when: device_response['json']['results'] or vm_response['json']['results']

- name: Update group with primary IPv4
  add_host:
    hostname: "{{ fw_name }}"
    groups: "{{ fw_name }}"
    ansible_host: "{{ (primary_data.primary_ip4.address | split('/'))[0] }}"
  when: primary_data.primary_ip4 is defined












roleIDs = ['226', '478', '136', '477']


https://netbox.spas.net/api/virtualization/virtual-machines/?role_id=477&cf_cmd_gnid=1394104


"extra_vars": {
        "RequestDetails": {
            "TicketNumber": "1234",
            "GNID": "12311",
            "Hostname": "test-dev-1",
            "PrimaryIP": "200.0.0.1",
            "DeviceRole": "BLANK",
            "DeviceMgmt": "BLANK",
            "DeviceMgmtIP": "BLANK",
            "DeviceMgmtDeviceGroup": "BLANK"
        },
        "Changes": [
            {
                "ChangeCategory": "SecurityRule",
                "ChangeType": "Add",
                "RuleName": "TESTRULE",
                "Tag": [],
                "Description": "",
                "SourceZone": [
                    "intenal"[],
                ],
                "SourceAddress": [
                    "10.0.0.0/24"
                ],
                "SourceUser": [],
                "SourceDevice": [],
                "DestinationZone": [
                    "external"
                ],
                "DestinationAddress": [
                    "10.0.1.0/24"
                ],
                "DestinationDevice": [],
                "Application": [],
                "URLCategory": [],
                "Service": [
                    "TCP/80"
                ],
                "Action": "allow",
                "LogSetting": "No",
                "ProfileGroup": "None",
                "URLFiltering": "None",
                "DataFiltering": "None",
                "FileBlocking": "None",
                "Antivirus": "None",
                "AntiSpyware": "None",
                "VulnerabilityProtection": "None",
                "WildFireAnalysis": "None"
            }
        ]
    }
}





---


- name: Read Devices Data From Netbox
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Get vault passwords
      ansible.builtin.set_fact:
        vault: "{{ lookup('hashi_vault', 'secret=ansible/data/tss') }}"
      no_log: true

    - name: Netbox Palo Estate Retreival Task
      ansible.builtin.script:
        cmd: read_devices_from_netbox.py
        executable: /usr/bin/python3
      environment:
        NETBOX_TOKEN: "{{ vault.netbox_soc_token }}"
      register: logNewNetboxDataVariable
      changed_when: false
      delegate_to: 10.122.2.22

    - name: Extract last line from stdout to store the read results
      set_fact:
        retreived_data: "{{ logNewNetboxDataVariable.stdout_lines[-1] | from_json }}"





