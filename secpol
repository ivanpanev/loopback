Ansible playbook:


---


- name: Read Devices Data From Netbox
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Get vault passwords
      ansible.builtin.set_fact:
        vault: "{{ lookup('hashi_vault', 'secret=ansible/data/tss') }}"
      no_log: true

    - name: Netbox Palo Estate Retreival Task
      ansible.builtin.script:
        cmd: read_devices_from_netbox.py
        executable: /usr/bin/python3
      environment:
        NETBOX_TOKEN: "{{ vault.netbox_soc_token }}"
      register: logNewNetboxDataVariable
      changed_when: false
      delegate_to: 10.160.2.22

    - name: Extract last line from stdout to store the read results
      set_fact:
        retreived_data: "{{ logNewNetboxDataVariable.stdout_lines[-1] | from_json }}"



Python script:


import requests
import json
from concurrent.futures import ThreadPoolExecutor, as_completed
from getpass import getpass
import io
import csv
from os import environ

def get_data_for_each_entry(entry):
    entryName = entry.get('name', 'Unknown')
    entryStatus = entry.get('status', {}).get('value', 'Unknown')
    if entry.get('primary_ip', 'Unknown'):
        entryMgmtIp = entry.get('primary_ip', 'Unknown').get('address', 'Unknown')
    else:
        entryMgmtIp = 'Unknown'
    if entry.get('role', 'Unknown'):
        entryRole = entry.get('role', {}).get('name', 'Unknown')
    else:
        entryRole = 'Unknown'
    if entry.get('site', 'Unknown'):
        entrySite = entry.get('site', {}).get('name', 'Unknown')
    else: 
        entrySite = 'Unknown'
    if entry.get('tenant', 'Unknown'):
        entryTenant = entry.get('tenant', 'Unknown').get('name', 'Unknown')
    else:
        entryTenant = 'Unknown'
    entryGNID = entry.get('custom_fields', {}).get('cmd_gnid', 'Unknown')
    entrySLID = entry.get('custom_fields', {}).get('cmd_slid', 'Unknown')
    entryPanoramaIP = entry.get('custom_fields', {}).get('panorama_ip', 'Unknown')

    return entryName, entryStatus, entryMgmtIp, entryPanoramaIP, entryRole, entrySite, entryTenant, entryGNID, entrySLID

def get_all_devices_by_roleid(role_id, token):
    headers = { 'Content-Type': 'application/json', 'Authorization': token }
    response = requests.get(f"https://netbox.gt-t.net/api/dcim/devices/?role_id={role_id}&limit=0", headers=headers).json()
    print(f"Response: {response}")
    devicesDataList = []
    if response['results']:
        for entry in response['results']:
            if not isinstance(entry, dict):
                continue 
            deviceName, deviceStatus, deviceMgmtIp, devicePanoramaIp, deviceRole, deviceSite, deviceTenant, deviceGNID, deviceSLID = get_data_for_each_entry(entry)
            devicesDataList.append([deviceName, deviceStatus, deviceMgmtIp, devicePanoramaIp, deviceRole, deviceSite, deviceTenant, deviceGNID, deviceSLID])

    return devicesDataList

def get_all_VMs_by_roleid(role_id, token):
    headers = { 'Content-Type': 'application/json', 'Authorization': token }
    response = requests.get(f"https://netbox.gt-t.net/api/virtualization/virtual-machines/?role_id={role_id}&limit=0", headers=headers).json()
    print(f"Response: {response}")
    vmsDataList = []
    if response['results']:
        for entry in response['results']:
            if not isinstance(entry, dict):
                continue 
            vmName, vmStatus, vmMgmtIp, vmPanoramaIp, vmRole, vmSite, vmTenant, vmGNID, vmSLID = get_data_for_each_entry(entry)
            vmsDataList.append([vmName, vmStatus, vmMgmtIp, vmPanoramaIp, vmRole, vmSite, vmTenant, vmGNID, vmSLID])

    return vmsDataList

def encode_to_csv(dataList):
    output = io.StringIO()
    csv_writer = csv.writer(output)
    csv_writer.writerow(['Hostname', 'Status', 'ManagementIP', 'PanoramaIP', 'Role', 'Site', 'Tenant', 'GNID', 'SLID'])
    csv_writer.writerows(dataList)
    return output.getvalue()

def main():
    netboxToken = 'Token ' + environ['NETBOX_TOKEN']
    #roleIDs = ['226', '478', '477']
    roleIDs = ['226', '478', '136', '477']
    dataList = []
    
    for role_id in roleIDs:
        devicesDataList = get_all_devices_by_roleid(role_id, netboxToken)
        vmsDataList = get_all_VMs_by_roleid(role_id, netboxToken)
        dataList += devicesDataList + vmsDataList

    print(json.dumps(dataList))

if __name__ == "__main__":
    main()



