---
- name: Simple reach-test to Palo Alto from jumphost
  hosts: localhost
  gather_facts: false
  connection: local

  vars:
    jumphost      : "10.16.2.22"     # ← the host that can reach the FW
    test_ip       : "100.66.31.9"    # ← firewall management-IP to probe
    test_user     : "t3-admin"
    test_pass     : "Px3Kx[8SxN"
    probe_name    : "palo_api_probe.py"   # file that lives in repo root

  tasks:
  ####################################################################
  # 0.  Copy the tiny helper to the jumphost **as the ssh user**      #
  ####################################################################
  - name: Copy probe helper (no sudo)
    copy:
      src : "{{ probe_name }}"
      dest: /tmp/{{ probe_name }}
      mode: "0755"
    delegate_to: "{{ jumphost }}"
    become: false            # ← absolutely no privilege-escalation

  ####################################################################
  # 1.  Run the helper, passing vars via ENV, still no sudo           #
  ####################################################################
  - name: Run probe helper (direct socket, no proxy)
    command: python3 /tmp/{{ probe_name }}
    delegate_to: "{{ jumphost }}"
    become: false
    environment:
      FW_IP   : "{{ test_ip }}"
      FW_USER : "{{ test_user }}"
      FW_PASS : "{{ test_pass }}"
      HTTP_PROXY : ""
      HTTPS_PROXY: ""
      NO_PROXY   : "{{ test_ip }}"
    register: probe

  - debug:
      var: probe.stdout_lines























#!/usr/bin/env python3
"""
Reach-test helper: tries a single key-gen request and prints the result.
Expects FW_IP, FW_USER, FW_PASS in the environment.
"""

import os, urllib.parse, urllib3, requests, xml.etree.ElementTree as ET
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def main():
    ip   = os.environ["FW_IP"]
    user = os.environ["FW_USER"]
    pwd  = os.environ["FW_PASS"]

    url = f"https://{ip}/api/?" + urllib.parse.urlencode(
        {"type": "keygen", "user": user, "password": pwd}
    )

    print("Gon Get API Key.")

    r = requests.get(url, verify=False, timeout=10,
                     proxies={"http": None, "https": None})
    r.raise_for_status()

    key = ET.fromstring(r.content).findtext(".//key")
    if not key:
        raise RuntimeError("No <key> element in response")

    print("SUCCESS – key prefix:", key[:15], "…")   # keep the key private

if __name__ == "__main__":
    main()
