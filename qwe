0  Inventory (or group_vars/all.yml)


# group_vars/all.yml
netbox_base:     "https://netbox.example/api/"
netbox_delegate: "10.160.2.22"          # host that can reach NetBox






















netbox_lookup.yml  (Job Template #1)

# netbox_lookup.yml
---
- name: Resolve GNIDs → IP/role list
  hosts: localhost
  gather_facts: false

  pre_tasks:
    # only the secret token is fetched from Vault
    - name: Pull NetBox token from Hashi Vault
      ansible.builtin.set_fact:
        netbox_token: >-
          {{ lookup('hashi_vault', 'secret=ansible/data/tss netbox_soc_token') }}
      no_log: true

  roles:
    - netbox_lookup                    # NetBox delegate + base URL come from inventory






















2  roles/netbox_lookup/vars/main.yml
---
# Device‑role → NetBox endpoint AND *firewall* delegate host
role_matrix:
  "226": { endpoint: "virtualization/virtual-machines", delegate: "localhost" }
  "136": { endpoint: "virtualization/virtual-machines", delegate: "localhost" }
  "477": { endpoint: "dcim/devices",                   delegate: "localhost" }
  "478": { endpoint: "dcim/devices",                   delegate: "jumphost-fw" }










3  roles/netbox_lookup/tasks/main.yml (unchanged)
yaml
Copy
Edit

---
- name: Turn newline‑separated GNIDs into a clean list
  set_fact:
    gnid_list: >-
      {{ gnid_block.splitlines()
                   | map('trim')
                   | reject('equalto','') | list }}
    firewalls: []

- name: NetBox‑lookup each GNID
  include_tasks:
    file: lookup_one_gnid.yml
    apply:
      vars:
        gnid: "{{ item }}"
  loop: "{{ gnid_list }}"
  loop_control:
    label: "GNID {{ item }}"

- name: Expose firewalls to workflow
  set_stats:
    data:
      firewalls: "{{ firewalls }}"
























4  roles/netbox_lookup/tasks/lookup_one_gnid.yml
yaml
Copy
Edit



---
# Executed once per GNID

- name: Initialise match list
  set_fact:
    ip_matches: []

# ── 1. Fire off async calls *from the NetBox proxy host* ─────────────────────
- name: Query NetBox for GNID {{ gnid }} in role {{ role_id }}
  uri:
    url: "{{ netbox_base }}{{ role_matrix[role_id].endpoint }}/?role_id={{ role_id }}&cf_cmd_gnid={{ gnid }}"
    headers:
      Authorization: "Token {{ netbox_token }}"
      Accept: "application/json"
    validate_certs: yes
    return_content: yes
  loop: "{{ role_matrix.keys() | list }}"
  loop_control:
    loop_var: role_id
  delegate_to: "{{ netbox_delegate }}"     # ← single host with NetBox reachability
  async: 30
  poll: 0
  throttle: 10
  register: nb_async
  failed_when: false

- name: Wait for NetBox replies
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: nb_results
  until: nb_results.finished
  retries: 50
  delay: 1
  loop: "{{ nb_async.results }}"
  loop_control:
    label: "{{ item._ansible_item_label }}"
  delegate_to: "{{ netbox_delegate }}"

# ── 2. Collect every hit (0–N) ───────────────────────────────────────────────
- name: Collect NetBox hits
  set_fact:
    ip_matches: >-
      {{ ip_matches
         + (item.result.json.results | default([])
            | map('combine',
                  { 'role_id': item.result.invocation.module_args.url
                                 .split('role_id=')[1].split('&')[0] })
            | list) }}
  when: (item.result.json.count | default(0) | int) > 0
  loop: "{{ nb_results.results }}"

# ── 3. Append to global list with the correct *firewall* delegate host ───────
- name: Append matches to global firewalls list
  set_fact:
    firewalls: "{{ firewalls + new_entries }}"
  vars:
    new_entries: >-
      {{
        ip_matches
        | map('combine',
              {
                'gnid'         : gnid,
                'ip'           : (item.primary_ip4.address.split('/'))[0],
                'delegate_host': role_matrix[item.role_id].delegate
              }) | list
      }}



